test <- tail(nomis[,c(2,11)], n=nrow(nomis)-20000)
cl<- nomis[1:20000,9]
a<-tail(nomis[,9],n=nrow(nomis)-20000)
final<-numeric()
b<-knn(training, test, cl, k=200, l=0, prob=TRUE)
b<-as.numeric(as.character(b))
rmse(a,b)
library(class)
library(class)
library(Metrics)
b<-knn(training, test, cl, k=200, l=0, prob=TRUE)
b<-as.numeric(as.character(b))
rmse(a,b)
View(nomis)
training<-head(nomis[,c(2,10)], n=20000)
test <- tail(nomis[,c(2,10)], n=nrow(nomis)-20000)
cl<- nomis[1:20000,9]
a<-tail(nomis[,9],n=nrow(nomis)-20000)
final<-numeric()
##k<-1
for (k in 1:10) {
b<-knn(training, test, cl, k, l=0, prob=TRUE)
b<-as.numeric(as.character(b))
final<-c(final, rmse(a,b))
}
plot(1:10, final)
final
b<-knn(training, test, cl, k=25, l=0, prob=TRUE)
b<-as.numeric(as.character(b))
rmse(a,b)
b<-knn(training, test, cl, k=100, l=0, prob=TRUE)
b<-as.numeric(as.character(b))
rmse(a,b)
problem.5 <- read.csv("~/Desktop/problem 5.csv")
View(problem.5)
p5<- problem.5
rm(problem.5)
mylm <-lm(GPA ~ GMAT, data = p5)
mylm
summary(mylm)
attach(nomis)
View(nomis)
lda.fit = lda(Accept. FICÕ + APR, data=nomis,subset =training)
lda.fit = lda(Accept. ̃ FICO+ APR, data=nomis,subset =training)
lda.fit = lda(Accept.~ FICO+ APR, data=nomis,subset =training)
library(Mass)
install.packages("Mass")
y
install.packages("MASS")
library(MASS)
lda.fit = lda(Accept.~ FICO+ APR, data=nomis,subset =training)
lda.fit = lda(Accept.~ FICO+ APR, data=nomis,subset =nomis[1:20000,])
lda.fit = lda(Accept.~ FICO + APR, data=nomis,subset =nomis[1:20000,])
head(nomis)
lda.fit = lda(Accept.~ FICO + APR, data=nomis,subset =nomis[1:20000,])
lda.fit = lda(Accept.~ FICO + APR, data=nomis,subset =nomis[1:20000,c(2,10)])
lda.fit = lda(Accept.~ FICO + APR, data=nomis,subset =training)
gead(training)
head(training)
training <- (APR)
training <- (FICO, APR)
training <- c(FICO, APR)
head(training)
training<-head(nomis[,c(2,10)], n=20000)
head(training)
>library(ISLR) #loads library ISLR
library(ISLR) #loads library ISLR
attach(Smarket)
head(Smarket)
train = (Year < 2005)
head(train)
da.fit = lda(Direction ̃Lag1 + Lag2, data=Smarket,subset =train)
da.fit = lda(Direction~Lag1 + Lag2, data=Smarket,subset =train)
da.fit
lda.fit = lda(Accept~ FICO + APR, data=nomis,subset =training)
lda.fit = lda(Accept.~ FICO + APR, data=nomis,subset =training)
type
?type
type(FICO)
typeof(FICO)
head(FICO)
View(nomis)
typeof(nomis)
typeof(training)
typeof(Smarket)
lda.fit = lda(Accept.~ FICO + APR, data=nomis,subset =nomis[1:20000,])
traceback()
summary(FICO)
str(FICO)
str(nomis)
str(APR)
str(Accept.)
lda.fit = lda(as.list(Accept.)~ FICO + APR, data=nomis,subset =nomis[1:20000,])
?as.list
as.list(Accept.)
Accept
Accept.
typeof(Accept.)
c<as.list(Accept.)
c<-as.list(Accept.)
lda.fit = lda(as.list(c~ FICO + APR, data=nomis,subset =nomis[1:20000,])
lda.fit = lda(c~ FICO + APR, data=nomis,subset =nomis[1:20000,])
lda.fit = lda(Accept.~ FICO + APR, data=nomis,subset =nomis[1:20000,])
typeof(train)
train <- nomis(nrow(nomis)<=20000)
head(nomis)
train <- nomis(nrow(nomis)<=20000)
train <- (nrow(nomis)<=20000)
head(train)
lda.fit = lda(Accept.~ FICO + APR, data=nomis,subset =train)
train = (Year < 2005)
head(train)
train <- (nrow(nomis)<=20000)
train
?rep
?logical
logical()
logical(rep(1,20000))
rm(c)
d<- rep(1,20000)
train <- logical(d)
train <- is.logical(d)
train
?as.log
?as.logical
train <- as.logical(d)
head(train)
lda.fit = lda(Accept.~ FICO + APR, data=nomis,subset =train)
lda.fit
nomis.test= nomis[!train,]
lda.pred= predict(lda.fit,nomis.test)
head(nomis.test)
lda.pred= predict(lda.fit,test)
lda.class<- lda.pred$clas
lda.class<- lda.pred$class
View(lda.pred)
?factor
str(lda.pred)
?rmse
rmse(a,lda.class)
typeof(lda.class)
typeof(a)
as.numeric?
?as.numeric
rmse(a,as.numeric(lda.class))
qda.fit = qda(Accept.~ FICO + APR, data=nomis,subset =train)
qda.pred= predict(qda.fit,test)
qda.class<- qda.pred$class
rmse(a,as.numeric(qda.class))
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
y
setwd("~/Desktop/Coursera/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome)
head(outcome)
outcome[1,]
ncol(outcome)
nrow(outcome)
> outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[, 11])
> hist(outcome[, 11])
hist(outcome[, 11])
View(outcome)
?is
state = "AL"
state<dtfile$State
dtfile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state<dtfile$State
state==dtfile$State
?unique
unique(dtfile$State)
match(state,unique(dtfile$State))
state="DD"
match(state,unique(dtfile$State))
?match
dtfile[1,11]
?name
?is.true
?logical
match(state,unique(dtfile$State))
state='NY'
match(state,unique(dtfile$State))
dtreq <- dtfile[state==dtfile$State]
state==dtfile$State
dtfile[state==dtfile$State]
dtfile(state==dtfile$State)
dtfile[state==dtfile$State]
dtreq <- dtfile[state==dtfile$State,]
while(state==dtfile$State)
which(state==dtfile$State)
?min
?len
?length
reqrow <- which(state==dtfile$State)
match(state,dtfile$State)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
reqcol <- col(kind==outcome)
reqrow <- which(state=dtfile$State)
reqrow <- which(state==dtfile$State)
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/best.R')
reqcol <- col(kind==outcome)
reqcol <- col[kind==outcome]
kind <- c("heart attack", "heart failure", "pneumonia")
col <- c(11,17,23)
outcome <- "heart attack"
kind==outcome
col[kind==outcome]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
?match
match(state, unique(dtfile$State)
match(state, unique(dtfile$State))
match(state, unique(dtfile$State))==NA
state <- "NA"
state <- "NN"
match(state, unique(dtfile$State))==NA
a<-match(state, unique(dtfile$State))
a
a==NA
summary(a)
str(a)
as.string(a)
as.character(a)
a<-as.character(a)
a==NA
source('~/.active-rstudio-document')
best("TX", "heart attack")
match(outcome,kind
match(outcome,kind)
kind="aaa"
match(outcome,kind)
match(outcome,kind)="NA"
match(outcome,kind)="NA"
match(outcome,kind)=="NA"
(match(state,unique(dtfile$State))=="NA")
source('~/.active-rstudio-document')
best("TX", "heart attack")
source('~/.active-rstudio-document')
best("TX", "heart attack")
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
submit()
2
submit()
submit()
kind <- c("heart attack", "heart failure", "pneumonia")
state = "NY"
outcome <- "heart attack"
col <- c(11,17,23)
reqcol <- col[kind==outcome]
reqrow <- which(state==dtfile$State)
newfile<- dtfile[reqrow,]
minval <- min(newfile[,reqcol],na.rm=TRUE)
dtfile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
col <- c(11,17,23)
reqcol <- col[kind==outcome]
reqrow <- which(state==dtfile$State)
newfile<- dtfile[reqrow,]
minval <- min(newfile[,reqcol],na.rm=TRUE)
View(newfile)
state==dtfile$State
minval
names <- newfile[minval==newfile[,reqcol],2]
names
minval <- min(newfile[,reqcol])
newfile[,reqcol]
sort(newfile[,reqcol])
source('~/.active-rstudio-document')
test("MD", "heart attack")
best("TX", "heart failure")
test("TX", "heart failure")
source('~/.active-rstudio-document')
best("TX", "heart failure")
source('~/.active-rstudio-document')
best("TX", "heart failure")
source('~/.active-rstudio-document')
best("TX", "heart failure")
test("TX", "heart failure")
state = "TX"
outcome = "heart failure"
reqcolnum <- col[kind==outcome]
newfile<- dtfile[state==dtfile$State,]
reqcol<- newfile[,reqcolnum]
minval <- min(reqcol,na.rm=TRUE)
minval
names <- newfile[minval==reqcol,2]
names
source('~/.active-rstudio-document')
best("TX", "heart failure")
test("TX", "heart failure")
unique(newfile[,2])
sort(unique(newfile[,2]))
source('~/.active-rstudio-document')
best("TX", "heart failure")
source('~/.active-rstudio-document')
best("TX", "heart failure")
test("TX", "heart failure")
submit()
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/best.R')
submit()
?order
a <- c('a','b','c')
b <-c(1,2,3)
c<-c(a,b)
c
c<-rbind(a,b)
c
?rbind
c<-cbind(a,b)
c
order(c)
?order
str(c)
sort(c)
?list
c<-as.list(c)
c
c<-list(a,b)
c
order(c)
sort.list(c)
sort(c)
?dataframe
?data
c<- data.frame(c)
c<- data.frame(a,b)
c
c(order(-c[,2]))
c[order(-c[,2])]
c[order(,-c[,2],)]
c[order(,-c[,2])]
c[,order(,-c[,2])]
?order
order(-a)
sort(a)
order(a)
order(b)
c[order(,-c[,2]),]
c[order(-c[,2]),]
c[1,1]<-"d"
a[2]<-f
a[2]<-'f'
c<-data.frame(a,b)
c
c[order(-c[,2]),]
c[1,]
c[,1]
c[1,1]
c[1][1]
c[1][1][1]
c[[1]]
c
c$a
c$a[1]
c
c[[1]]
c[[1,1]]
as.vectorc[[1,1]]
as.vector(c[[1,1]])
a[3]<-'f'
c<-data.frame(a,b)
c[order(-c[,1]),]
c[order(c[,1]),]
c[order(-c[,1]),]
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
newfile<- dtfile[state==dtfile$State,]
reqname<- newfile[,2]
reqval<- as.numeric(newfile[,reqcolnum])
reqlist <- data.frame(reqname,reqval)
View(reqlist)
reqlist <- reqlist[complete.cases(reqlist),]
View(reqlist)
is.na(reqlist)
reqlist <- reqlist[order(as.numeric(reqlist[,2]))]
reqlist <- with(reqlist, order(as.numeric(reqlist[,2])))
View(reqlist)
reqlist <- with(reqlist, order(as.numeric(reqlist[,2],reqlist[,1])))
reqlist <- with(reqlist, order(as.numeric(reqlist[2],reqlist[1])))
reqlist <- with(reqlist, order(reqlist[2],reqlist[1]))
?with
reqlist <- with(reqlist, order(reqlist[[2]],reqlist[[1]))
reqlist <- with(reqlist, order(reqlist[[2]],reqlist[[1]]))
view(reqval)
View(reqval)
View(names(reqval)
View(names(reqval))
newfile<- newfile[!is.na(newfile[,newfile$State]),]
newfile<- newfile[,!is.na(newfile[,newfile$State])]
newfile<- newfile[,!is.na(newfile[newfile$State,])]
View(newfile)
newfile<- dtfile[state==dtfile$State,]
newfile<- newfile[!is.na(newfile[newfile$State,]),]
View(dtfile)
newfile<- dtfile[state==dtfile$State,]
newfile<- newfile[!is.na(newfile[,7]),]
View(dtfile)
hospname<-names(newfile)[2]
hospname
order(newfile[,reqcolnum])
newfile[order(newfile[,reqcolnum]),]
newfile[order(newfile[,reqcolnum],newfile[,2]),]
ab<-newfile[order(newfile[,reqcolnum],newfile[,2]),]
View(ab)
newfile[,reqcolnum]<-as.numeric(newfile[,reqcolnum])
ab<-newfile[order(newfile[,reqcolnum],newfile[,2]),]
newfile[2,1]
newfile[1,2]
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/.active-rstudio-document')
rankhospital("TX", "heart failure", 4)
state= "TX"
outcome<-"heart failure"
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")\
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
View(dtfile)
?tapply
dtfile<- dtfile[!is.na(newfile[,reqcolnum]),]   # remove NA values
dtfile<-dtfile[order(dtfile[,7],dtfile[,reqcolnum],dtfile[,2]),]  #order by state,value & name
tapply(dtfile[,reqcolnum],dtfile[,7],row(min))
tapply(dtfile[,reqcolnum],dtfile[,7],min)
tapply(dtfile[,reqcolnum],dtfile[,7],row(min)
tapply(dtfile[,reqcolnum],dtfile[,7],row(min))
factor(dtfile[,7])
?factor
levels(factor(dtfile[,7]))
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Desktop/Coursera/rprog-data-ProgAssignment3-data/rankall.R')
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
install.packages("swirl")
library(swirl)
swirl()
5+7
x<- 5+7
x
y<-x-3
y
c(1.1, 9,
| 3.14)
c(1.1, 9,3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
mysqrt<-sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
bye()
